游댴 datetime object -> df['Date']= pd.to_datetime(df['Timestamp'], unit='s')

游댴 df = df[~df['Date'].dt.year.isin([2012, 2013, 2014])] # or df = df[(df['year'] >= 2015) & (df['year'] <= 2025)]

游댴 cols to lower case -> df.columns = df.columns.str.lower() 

游댴 resampling -> df.resample('M').mean() # or Y, W 
find out the highest average month -> df.resample('M').mean()['close'].idxmax() 

游댴 rolling window calculations -> df['7_day_rolling'] = df['close'].rolling(window = 1000).mean() 

df['close'].pct_change() * 100

游댴 lagged values -> df['closed_lag1']= df['close'].shift(1)

游댴 SEASONAL DECOMPOSITION
- trends: general direction of the time series
- seasonality: seasonal cycles -> 2 types: 
    - additive: have constant seasonal fluctuations or seasonal cycles are constant in value
    - multiplicative: seasonal cycles are proportional to the trend (in %age)
- error term: what is not explained by trends and seasonality

游댴 STATSMODEL -> TO SHOW SEASONALITY CURVE
from statsmodels.graphics.tsaplots import month_plot, quarter_plot
month_plot(df['close'].resample('M').mean(), ylabel='closing') # or 'Q'

from statsmodels.tsa.seasonal import seasonal_decompose
decomp2 = seasonal_decompose(df['close'], model='add', period = 24) # or 'mul'
fig = decomp2.plot()
fig.set_size_inches(10,8)
plt.show()

游댴 AUTOCORRELATION
- tells if there is info in past that could help in predict future
- correlates time series features with lagged values

游릭 TREND
from statsmodels.tsa.deterministic import DeterministicProcess
dp = DeterministicProcess(
    index=tunnel.index,  # dates from the training data
    constant=True,       # dummy feature for the bias (y_intercept)
    order=1,             # the time dummy (trend)
    drop=True,           # drop terms if necessary to avoid collinearity
)
# `in_sample` creates features for the dates given in the `index` argument
X = dp.in_sample()

游릭 FORECAST 
To make a forecast, we apply our model to "out of sample" features. 
"Out of sample" refers to times outside of the observation period of the training data. Here's how we could make a 30-day forecast:

X = dp.out_of_sample(steps=30)
y_fore = pd.Series(model.predict(X), index=X.index)
y_fore.head()

"""
from statsmodels.tsa.deterministic import DeterministicProcess

y = average_sales.copy()  # the target

# Instantiate `DeterministicProcess` with arguments appropriate for a cubic trend model
dp = DeterministicProcess(
    index = y.index,
    order = 3 
)

X = dp.in_sample() # Create the feature set for the dates given in y.index
X_fore = dp.out_of_sample(steps=90) # Create features for a 90-day forecast.

model = LinearRegression()
model.fit(X, y)

y_pred = pd.Series(model.predict(X), index=X.index)
y_fore = pd.Series(model.predict(X_fore), index=X_fore.index)

ax = y.plot(**plot_params, alpha=0.5, title="Average Sales", ylabel="items sold")
ax = y_pred.plot(ax=ax, linewidth=3, label="Trend", color='C0')
ax = y_fore.plot(ax=ax, linewidth=3, label="Trend Forecast", color='C3')
ax.legend();
"""

游릭 MOVING AVERAGE PLOT
make a moving average plot to see what kind of trend a series has. 
To create a moving average, first use the rolling method to begin a windowed computation.
(daily observation: 365, monthly observation: 12, weekly observation: 7, quarterly observation: 4)
Follow this by the mean method to compute the average over the window. 

moving_average = tunnel.rolling(
    window=365,       # 365-day window -> for daily observations
    center=True,      # puts the average at the center of the window
    min_periods=183,  # choose about half the window size
).mean()              # compute the mean (could also do median, std, min, max, ...)

ax = tunnel.plot(style=".", color="0.5")
moving_average.plot(
    ax=ax, linewidth=3, title="Tunnel Traffic - 365-Day Moving Average", legend=False,
)

游릭 SEASONALITY
The first kind, indicators, is best for a season with few observations, like a weekly season of daily observations. 
The second kind, Fourier features, is best for a season with many observations, like an annual season of daily observations.
we used a moving average plot to discover the trend in a series, similarly we can use a seasonal plot to discover seasonal patterns.

游릭 SEASONAL INDICATORS
Seasonal indicators are binary features that represent seasonal differences in the level of a time series.
Seasonal indicators are what you get if you treat a seasonal period (eg, days of week, monthly) as a categorical feature and apply one-hot encoding.

游릭 FOURIER FEATURES
they are pairs of sine and cosine curves, one pair for each potential frequency in the season starting with the longest. 
Fourier pairs modeling annual seasonality would have frequencies: once per year, twice per year, three times per year, and so on

reduced computation time and less risk of overfitting in fourier ft as few fts added to training data compared to indicators
periodogram tells you the strength of the frequencies in a time series

游릭 SEASONAL_PLOT
X = average_sales.to_frame()
X["week"] = X.index.week
X["day"] = X.index.dayofweek
seasonal_plot(X, y='sales', period='week', freq='day'); # seasonal plot over a week

游릭 CREATING SEASONAL FEATURES

"""
from statsmodels.tsa.deterministic import CalendarFourier, DeterministicProcess
fourier = CalendarFourier(freq="A", order=10)  # 10 sin/cos pairs for "A"nnual seasonality

dp = DeterministicProcess(
    index=tunnel.index,
    constant=True,               # dummy feature for bias (y-intercept)
    order=1,                     # trend (order 1 means linear)
    seasonal=True,               # weekly seasonality (indicators)
    additional_terms=[fourier],  # annual seasonality (fourier)
    drop=True,                   # drop terms to avoid collinearity
)
X = dp.in_sample()  # create features for dates in tunnel.index
"""

"""
Use DeterministicProcess and CalendarFourier to create: indicators for weekly seasons and Fourier features of order 4 for monthly seasons.
y = average_sales.copy()
fourier = CalendarFourier(freq="M", order = 4)
dp = DeterministicProcess(
    index=y.index,
    constant=True,
    order=1,
    seasonal= True,
    additional_terms=[fourier],
    drop=True,
)
X = dp.in_sample()
"""

游릭 Removing from a series its trend or seasons is called detrending or deseasonalizing the series.

游릭 AIRCRAFT-CRASH IMPORTANT

# print(df[df.summ1 == 'No summary available'].value_counts().sum()) # 240 valid
# print(df[df.summ2 == 'No summary available'].value_counts().sum()) # 6 valid
# print(df[(df.summ2 == 'No summary available') & (df.summ1 == 'No summary available')].value_counts().sum()) # 246

# df['year'].value_counts() # unsorted
# df['year'].value_counts().sort_index() # sorted index : HERE index = year

# # crashes by year -> barchart
# plt.figure(figsize=(10,5))
# df['year'].value_counts().sort_index().plot(rot=90, kind='bar') # or df.groupby('year').size().plot(kind='bar', rot=90)
# plt.xlabel('Year')
# plt.ylabel('Count')
# plt.title('Crash counts per Year')
# plt.show()

# # below plot is useful only if each row represents a unique event and you're interested in seeing their exact individual values.
# plt.figure(figsize=(9,4))
# plt.plot(df.year, df.incidents, color='green', marker='.', linestyle='dashed', linewidth=2, markersize=12)
# plt.ylabel('Count')
# plt.title('Crash counts per Year')
# plt.grid(True)
# plt.show()
